import java.io.BufferedReader;
import java.io.BufferedWriter;
import java.io.IOException;
import java.io.InputStreamReader;
import java.io.OutputStreamWriter;
import java.util.Comparator;
import java.util.PriorityQueue;
import java.util.StringTokenizer;

public class Main{
    public static StringBuffer sb = new StringBuffer();

    public static void main(String[] args) throws IOException{
        // Input
        BufferedReader br = new BufferedReader(new InputStreamReader(System.in));
        BufferedWriter bw = new BufferedWriter(new OutputStreamWriter(System.out));

        int n = Integer.parseInt(br.readLine());

        StringTokenizer st;

        Comparator<Integer[]> com = new Comparator<Integer[]>() {
            @Override
            public int compare(Integer[] o1, Integer[] o2){
                if(o1[0] == o2[0]){
                    if(o1[1] == o2[1]) return 0;
                    else if(o1[1] > o2[1]) return 1; 
                    else return -1;
                }
                else if(o1[0] > o2[0]) return 1;
                else  return -1;
            }
        };
        PriorityQueue<Integer[]> pq = new PriorityQueue<>(com);

        for(int i=0; i<n; i++){
            st = new StringTokenizer(br.readLine());
            pq.add(new Integer[]{
                Integer.parseInt(st.nextToken()),
                Integer.parseInt(st.nextToken())
            });
        }

        // Logic
        int count = 0;
        int[] prev = new int[2];
        if(!pq.isEmpty()){
            prev[0] = pq.peek()[0];
            prev[1] = pq.poll()[1];
            count += 1;
        }

        int[] next = new int[2];
        while(!pq.isEmpty()){
            next[0] = pq.peek()[0];
            next[1] = pq.poll()[1];

            if(next[0] == prev[0]){
                if(prev[0] == prev[1]){
                    prev[0] = next[0];
                    prev[1] = next[1];
                    count += 1;
                }
            }
            else{
                if(next[0] >= prev[1]){
                    prev[0] = next[0];
                    prev[1] = next[1];
                    count += 1;
                }
                else if(next[1] < prev[1]){
                    prev[0] = next[0];
                    prev[1] = next[1];
                }
            }
        }

        sb.append(count);

        // Output
        bw.write(sb.toString());

        br.close();
        bw.flush();
        bw.close();
    }
}