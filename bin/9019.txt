import java.io.BufferedReader;
import java.io.BufferedWriter;
import java.io.IOException;
import java.io.InputStreamReader;
import java.io.OutputStreamWriter;
import java.util.Deque;
import java.util.LinkedList;
import java.util.Queue;
import java.util.StringTokenizer;

public class Main{
    public static StringBuffer sb = new StringBuffer();

    public static void main(String[] args) throws IOException{
        // Input
        BufferedReader br = new BufferedReader(new InputStreamReader(System.in));
        BufferedWriter bw = new BufferedWriter(new OutputStreamWriter(System.out));

        int n = Integer.parseInt(br.readLine());
        
        StringTokenizer st;

        for(int i=0; i<n; i++){
            st = new StringTokenizer(br.readLine());
            int a = Integer.parseInt(st.nextToken());
            int b = Integer.parseInt(st.nextToken());

            // Logic
            Queue<Integer> queue = new LinkedList<>();
            queue.add(a);
            boolean[] visited = new boolean[10000];
            visited[a] = true;

            while(!queue.isEmpty()){
                int q = queue.poll();
                
                int case1 = 2*q%10000;
                
                int case2 = q-1;
                if(case2 < 0) case2 = 9999;
                
                Deque<Integer> deque  = new LinkedList<>();
                int num = q;
                for(int d=3; d>=0; d--){
                    deque.add(num / (int)Math.pow(10, d));
                    num %= Math.pow(10, d);
                }

                int case3 = 0;
                deque.add(deque.poll());
                for(int d=0; d<4; d++){
                    case3 += deque.peekLast() * Math.pow(10, d);
                    deque.addFirst(deque.pollLast());
                }
                
                int case4 = 0;
                deque.addFirst(deque.pollLast());
                deque.addFirst(deque.pollLast());
                for(int d=0; d<4; d++){
                    case4 += deque.pollLast() * Math.pow(10, d);
                }

                System.out.println(case1);
                System.out.println(case2);
                System.out.println(case3);
                System.out.println(case4);

                if(!visited[case1]){
                    visited[case1] = true;
                    
                }
            }
        }

        // Output
        bw.write(sb.toString());

        br.close();
        bw.flush();
        bw.close();
    }
}